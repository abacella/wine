{"ast":null,"code":"var _jsxFileName = \"/Users/andrebacellardemiranda/nft-auction/packages/react-app/src/components/Faucet.jsx\";\nimport React, { useState, useCallback } from \"react\";\nimport { Input, Button, Tooltip } from \"antd\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\nimport { useLookupAddress } from \"eth-hooks\"; // improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  let blockie;\n\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = /*#__PURE__*/React.createElement(Blockies, {\n      seed: address.toLowerCase(),\n      size: 8,\n      scale: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }\n    });\n  } else {\n    blockie = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }\n    });\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n  const updateAddress = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      let address = newValue;\n\n      if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n        try {\n          const possibleAddress = await props.ensProvider.resolveName(address);\n\n          if (possibleAddress) {\n            address = possibleAddress;\n          } // eslint-disable-next-line no-empty\n\n        } catch (e) {}\n      }\n\n      setAddress(address);\n    }\n  }, [props.ensProvider, props.onChange]);\n  const tx = Transactor(props.localProvider);\n}","map":{"version":3,"sources":["/Users/andrebacellardemiranda/nft-auction/packages/react-app/src/components/Faucet.jsx"],"names":["React","useState","useCallback","Input","Button","Tooltip","Blockies","SendOutlined","parseEther","Transactor","Wallet","useLookupAddress","Faucet","props","address","setAddress","blockie","toLowerCase","ens","ensProvider","updateAddress","newValue","indexOf","possibleAddress","resolveName","e","onChange","tx","localProvider"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,OAAxB,QAAuC,MAAvC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,gBAAT,QAAiC,WAAjC,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,EAAtC;AAEA,MAAIe,OAAJ;;AACA,MAAIF,OAAO,IAAI,OAAOA,OAAO,CAACG,WAAf,KAA+B,UAA9C,EAA0D;AACxDD,IAAAA,OAAO,gBAAG,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEF,OAAO,CAACG,WAAR,EAAhB;AAAuC,MAAA,IAAI,EAAE,CAA7C;AAAgD,MAAA,KAAK,EAAE,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACD;;AAED,QAAME,GAAG,GAAGP,gBAAgB,CAACE,KAAK,CAACM,WAAP,EAAoBL,OAApB,CAA5B;AAEA,QAAMM,aAAa,GAAGlB,WAAW,CAC/B,MAAMmB,QAAN,IAAkB;AAChB,QAAI,OAAOA,QAAP,KAAoB,WAAxB,EAAqC;AACnC,UAAIP,OAAO,GAAGO,QAAd;;AACA,UAAIP,OAAO,CAACQ,OAAR,CAAgB,MAAhB,IAA0B,CAA1B,IAA+BR,OAAO,CAACQ,OAAR,CAAgB,MAAhB,IAA0B,CAA7D,EAAgE;AAC9D,YAAI;AACF,gBAAMC,eAAe,GAAG,MAAMV,KAAK,CAACM,WAAN,CAAkBK,WAAlB,CAA8BV,OAA9B,CAA9B;;AACA,cAAIS,eAAJ,EAAqB;AACnBT,YAAAA,OAAO,GAAGS,eAAV;AACD,WAJC,CAKF;;AACD,SAND,CAME,OAAOE,CAAP,EAAU,CAAE;AACf;;AACDV,MAAAA,UAAU,CAACD,OAAD,CAAV;AACD;AACF,GAf8B,EAgB/B,CAACD,KAAK,CAACM,WAAP,EAAoBN,KAAK,CAACa,QAA1B,CAhB+B,CAAjC;AAmBA,QAAMC,EAAE,GAAGlB,UAAU,CAACI,KAAK,CAACe,aAAP,CAArB;AAGD","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Input, Button, Tooltip } from \"antd\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\nimport { useLookupAddress } from \"eth-hooks\";\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n \n}\n"]},"metadata":{},"sourceType":"module"}